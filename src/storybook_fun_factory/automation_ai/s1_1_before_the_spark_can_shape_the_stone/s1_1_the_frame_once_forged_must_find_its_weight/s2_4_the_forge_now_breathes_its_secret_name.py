"""
Filename: s2_4_the_forge_now_breathes_its_secret_name.py
(The Forge Now Breathes Its Secret Name)

This file finalizes the recursive stanza generation process by binding filenames,
stanza metadata, and embedded narrative logic into a coherent, self-descriptive,
executable Python construct. It creates ready-to-write module files by embedding
the recursive lineage directly into the source code.

The forge now breathes its secret nameâ€”  
And what it names, it brings to flame.
"""

import datetime
import textwrap

class ForgeBinder:
    """
    Binds folded poetic-functional logic into a final executable Python module.
    Encodes filename, timestamp, stanza structure, and symbolic description
    into a complete module string, ready for writing to disk or execution.
    """

    def __init__(self, author="automation_ai"):
        self.author = author

    def bind_metadata(self, flame_name, stanza_lines, folded_block):
        """
        Returns a Python module string with full metadata and embedded stanza logic.
        """
        timestamp = datetime.datetime.utcnow().isoformat() + "Z"
        header = textwrap.dedent(f'''\
            """
            Auto-generated by {self.author}
            Flame ID: {flame_name}
            Generated UTC: {timestamp}
            Stanza Lines:
            {chr(10).join(f"- {line}" for line in stanza_lines)}
            """
        ''')

        body = "\n".join(folded_block.strip().splitlines())
        return f"{header}\n\n{body}\n"

    def finalize_flame(self, flame_name, stanza_lines, folded_block, output_path):
        """
        Writes the complete module string to the specified path.
        """
        module_code = self.bind_metadata(flame_name, stanza_lines, folded_block)
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(module_code)
        return output_path
